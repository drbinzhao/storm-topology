/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.coffeetechgaff.storm.algorithmnode;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlgorithmParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2104420996275876346L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlgorithmParameter\",\"namespace\":\"com.coffeetechgaff.storm.algorithmnode\",\"fields\":[{\"name\":\"entity\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique name for the parameter, generally driven by the backing implementation.\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User visible name for the parameter.\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User visible description for the parameter.\",\"default\":\"\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Value type, string, integer, double, datetime\",\"default\":\"string\"},{\"name\":\"defaultValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Default value, if any, for the parameter.\"},{\"name\":\"uiHint\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Hint for presentation of this parameter in the UI.\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique name for the parameter, generally driven by the backing implementation. */
  @Deprecated public java.lang.String entity;
  /** User visible name for the parameter. */
  @Deprecated public java.lang.String name;
  /** User visible description for the parameter. */
  @Deprecated public java.lang.String description;
  /** Value type, string, integer, double, datetime */
  @Deprecated public java.lang.String type;
  /** Default value, if any, for the parameter. */
  @Deprecated public java.lang.String defaultValue;
  /** Hint for presentation of this parameter in the UI. */
  @Deprecated public java.lang.String uiHint;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlgorithmParameter() {}

  /**
   * All-args constructor.
   * @param entity Unique name for the parameter, generally driven by the backing implementation.
   * @param name User visible name for the parameter.
   * @param description User visible description for the parameter.
   * @param type Value type, string, integer, double, datetime
   * @param defaultValue Default value, if any, for the parameter.
   * @param uiHint Hint for presentation of this parameter in the UI.
   */
  public AlgorithmParameter(java.lang.String entity, java.lang.String name, java.lang.String description, java.lang.String type, java.lang.String defaultValue, java.lang.String uiHint) {
    this.entity = entity;
    this.name = name;
    this.description = description;
    this.type = type;
    this.defaultValue = defaultValue;
    this.uiHint = uiHint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entity;
    case 1: return name;
    case 2: return description;
    case 3: return type;
    case 4: return defaultValue;
    case 5: return uiHint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entity = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: type = (java.lang.String)value$; break;
    case 4: defaultValue = (java.lang.String)value$; break;
    case 5: uiHint = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entity' field.
   * @return Unique name for the parameter, generally driven by the backing implementation.
   */
  public java.lang.String getEntity() {
    return entity;
  }

  /**
   * Sets the value of the 'entity' field.
   * Unique name for the parameter, generally driven by the backing implementation.
   * @param value the value to set.
   */
  public void setEntity(java.lang.String value) {
    this.entity = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return User visible name for the parameter.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * User visible name for the parameter.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return User visible description for the parameter.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * User visible description for the parameter.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Value type, string, integer, double, datetime
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Value type, string, integer, double, datetime
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'defaultValue' field.
   * @return Default value, if any, for the parameter.
   */
  public java.lang.String getDefaultValue() {
    return defaultValue;
  }

  /**
   * Sets the value of the 'defaultValue' field.
   * Default value, if any, for the parameter.
   * @param value the value to set.
   */
  public void setDefaultValue(java.lang.String value) {
    this.defaultValue = value;
  }

  /**
   * Gets the value of the 'uiHint' field.
   * @return Hint for presentation of this parameter in the UI.
   */
  public java.lang.String getUiHint() {
    return uiHint;
  }

  /**
   * Sets the value of the 'uiHint' field.
   * Hint for presentation of this parameter in the UI.
   * @param value the value to set.
   */
  public void setUiHint(java.lang.String value) {
    this.uiHint = value;
  }

  /**
   * Creates a new AlgorithmParameter RecordBuilder.
   * @return A new AlgorithmParameter RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder newBuilder() {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder();
  }

  /**
   * Creates a new AlgorithmParameter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlgorithmParameter RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder newBuilder(com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder other) {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder(other);
  }

  /**
   * Creates a new AlgorithmParameter RecordBuilder by copying an existing AlgorithmParameter instance.
   * @param other The existing instance to copy.
   * @return A new AlgorithmParameter RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder newBuilder(com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter other) {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder(other);
  }

  /**
   * RecordBuilder for AlgorithmParameter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlgorithmParameter>
    implements org.apache.avro.data.RecordBuilder<AlgorithmParameter> {

    /** Unique name for the parameter, generally driven by the backing implementation. */
    private java.lang.String entity;
    /** User visible name for the parameter. */
    private java.lang.String name;
    /** User visible description for the parameter. */
    private java.lang.String description;
    /** Value type, string, integer, double, datetime */
    private java.lang.String type;
    /** Default value, if any, for the parameter. */
    private java.lang.String defaultValue;
    /** Hint for presentation of this parameter in the UI. */
    private java.lang.String uiHint;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entity)) {
        this.entity = data().deepCopy(fields()[0].schema(), other.entity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[4].schema(), other.defaultValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.uiHint)) {
        this.uiHint = data().deepCopy(fields()[5].schema(), other.uiHint);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlgorithmParameter instance
     * @param other The existing instance to copy.
     */
    private Builder(com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.entity)) {
        this.entity = data().deepCopy(fields()[0].schema(), other.entity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[4].schema(), other.defaultValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.uiHint)) {
        this.uiHint = data().deepCopy(fields()[5].schema(), other.uiHint);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'entity' field.
      * Unique name for the parameter, generally driven by the backing implementation.
      * @return The value.
      */
    public java.lang.String getEntity() {
      return entity;
    }

    /**
      * Sets the value of the 'entity' field.
      * Unique name for the parameter, generally driven by the backing implementation.
      * @param value The value of 'entity'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setEntity(java.lang.String value) {
      validate(fields()[0], value);
      this.entity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'entity' field has been set.
      * Unique name for the parameter, generally driven by the backing implementation.
      * @return True if the 'entity' field has been set, false otherwise.
      */
    public boolean hasEntity() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'entity' field.
      * Unique name for the parameter, generally driven by the backing implementation.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearEntity() {
      entity = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * User visible name for the parameter.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * User visible name for the parameter.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * User visible name for the parameter.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * User visible name for the parameter.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * User visible description for the parameter.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * User visible description for the parameter.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * User visible description for the parameter.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * User visible description for the parameter.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Value type, string, integer, double, datetime
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Value type, string, integer, double, datetime
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setType(java.lang.String value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Value type, string, integer, double, datetime
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * Value type, string, integer, double, datetime
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'defaultValue' field.
      * Default value, if any, for the parameter.
      * @return The value.
      */
    public java.lang.String getDefaultValue() {
      return defaultValue;
    }

    /**
      * Sets the value of the 'defaultValue' field.
      * Default value, if any, for the parameter.
      * @param value The value of 'defaultValue'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setDefaultValue(java.lang.String value) {
      validate(fields()[4], value);
      this.defaultValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'defaultValue' field has been set.
      * Default value, if any, for the parameter.
      * @return True if the 'defaultValue' field has been set, false otherwise.
      */
    public boolean hasDefaultValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'defaultValue' field.
      * Default value, if any, for the parameter.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearDefaultValue() {
      defaultValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'uiHint' field.
      * Hint for presentation of this parameter in the UI.
      * @return The value.
      */
    public java.lang.String getUiHint() {
      return uiHint;
    }

    /**
      * Sets the value of the 'uiHint' field.
      * Hint for presentation of this parameter in the UI.
      * @param value The value of 'uiHint'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder setUiHint(java.lang.String value) {
      validate(fields()[5], value);
      this.uiHint = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'uiHint' field has been set.
      * Hint for presentation of this parameter in the UI.
      * @return True if the 'uiHint' field has been set, false otherwise.
      */
    public boolean hasUiHint() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'uiHint' field.
      * Hint for presentation of this parameter in the UI.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter.Builder clearUiHint() {
      uiHint = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AlgorithmParameter build() {
      try {
        AlgorithmParameter record = new AlgorithmParameter();
        record.entity = fieldSetFlags()[0] ? this.entity : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.String) defaultValue(fields()[3]);
        record.defaultValue = fieldSetFlags()[4] ? this.defaultValue : (java.lang.String) defaultValue(fields()[4]);
        record.uiHint = fieldSetFlags()[5] ? this.uiHint : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
