/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.coffeetechgaff.storm.algorithmnode;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlgorithmNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6004941741090085986L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlgorithmNode\",\"namespace\":\"com.coffeetechgaff.storm.algorithmnode\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"Operation\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\",\"WRONG\"]},\"doc\":\"Indicates the operation for the algorithm node.\"},{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the algorithm\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name for the algorithm, not necessarily unique.\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"NodeStatus\",\"symbols\":[\"TESTING\",\"PRODUCTION\",\"RETIRED\"]},\"doc\":\"Indicates the development status of the algorithm.\",\"default\":\"PRODUCTION\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Brief description of the purpose for the algorithm.\"},{\"name\":\"author\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Author responsible for the algorithm.\",\"default\":\"\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Contact email for the author of the algorithm.\",\"default\":\"\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version for the algorithm.\",\"default\":\"\"},{\"name\":\"input\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NodeConfig\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name for the stream. Used for configuration purposes, not related to topic name.\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Stream type. Can be namespace scoped reference for a particular type, or could be a generic type indicator.\"}]}},\"doc\":\"Input source stream type of the algorithm. Defined as array for future expansion.\"},{\"name\":\"output\",\"type\":{\"type\":\"array\",\"items\":\"NodeConfig\"},\"doc\":\"Output source stream type of the algorithm. Defined as array for future expansion.\"},{\"name\":\"parameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlgorithmParameter\",\"fields\":[{\"name\":\"entity\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique name for the parameter, generally driven by the backing implementation.\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User visible name for the parameter.\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User visible description for the parameter.\",\"default\":\"\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Value type, string, integer, double, datetime\",\"default\":\"string\"},{\"name\":\"defaultValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Default value, if any, for the parameter.\"},{\"name\":\"uiHint\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Hint for presentation of this parameter in the UI.\",\"default\":\"\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Indicates the operation for the algorithm node. */
  @Deprecated public com.coffeetechgaff.storm.algorithmnode.Operation operation;
  /** Unique identifier for the algorithm */
  @Deprecated public java.lang.String uid;
  /** Name for the algorithm, not necessarily unique. */
  @Deprecated public java.lang.String name;
  /** Indicates the development status of the algorithm. */
  @Deprecated public com.coffeetechgaff.storm.algorithmnode.NodeStatus status;
  /** Brief description of the purpose for the algorithm. */
  @Deprecated public java.lang.String description;
  /** Author responsible for the algorithm. */
  @Deprecated public java.lang.String author;
  /** Contact email for the author of the algorithm. */
  @Deprecated public java.lang.String email;
  /** Version for the algorithm. */
  @Deprecated public java.lang.String version;
  /** Input source stream type of the algorithm. Defined as array for future expansion. */
  @Deprecated public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> input;
  /** Output source stream type of the algorithm. Defined as array for future expansion. */
  @Deprecated public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> output;
  @Deprecated public java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> parameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlgorithmNode() {}

  /**
   * All-args constructor.
   * @param operation Indicates the operation for the algorithm node.
   * @param uid Unique identifier for the algorithm
   * @param name Name for the algorithm, not necessarily unique.
   * @param status Indicates the development status of the algorithm.
   * @param description Brief description of the purpose for the algorithm.
   * @param author Author responsible for the algorithm.
   * @param email Contact email for the author of the algorithm.
   * @param version Version for the algorithm.
   * @param input Input source stream type of the algorithm. Defined as array for future expansion.
   * @param output Output source stream type of the algorithm. Defined as array for future expansion.
   * @param parameters The new value for parameters
   */
  public AlgorithmNode(com.coffeetechgaff.storm.algorithmnode.Operation operation, java.lang.String uid, java.lang.String name, com.coffeetechgaff.storm.algorithmnode.NodeStatus status, java.lang.String description, java.lang.String author, java.lang.String email, java.lang.String version, java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> input, java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> output, java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> parameters) {
    this.operation = operation;
    this.uid = uid;
    this.name = name;
    this.status = status;
    this.description = description;
    this.author = author;
    this.email = email;
    this.version = version;
    this.input = input;
    this.output = output;
    this.parameters = parameters;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return uid;
    case 2: return name;
    case 3: return status;
    case 4: return description;
    case 5: return author;
    case 6: return email;
    case 7: return version;
    case 8: return input;
    case 9: return output;
    case 10: return parameters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (com.coffeetechgaff.storm.algorithmnode.Operation)value$; break;
    case 1: uid = (java.lang.String)value$; break;
    case 2: name = (java.lang.String)value$; break;
    case 3: status = (com.coffeetechgaff.storm.algorithmnode.NodeStatus)value$; break;
    case 4: description = (java.lang.String)value$; break;
    case 5: author = (java.lang.String)value$; break;
    case 6: email = (java.lang.String)value$; break;
    case 7: version = (java.lang.String)value$; break;
    case 8: input = (java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig>)value$; break;
    case 9: output = (java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig>)value$; break;
    case 10: parameters = (java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return Indicates the operation for the algorithm node.
   */
  public com.coffeetechgaff.storm.algorithmnode.Operation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * Indicates the operation for the algorithm node.
   * @param value the value to set.
   */
  public void setOperation(com.coffeetechgaff.storm.algorithmnode.Operation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'uid' field.
   * @return Unique identifier for the algorithm
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * Unique identifier for the algorithm
   * @param value the value to set.
   */
  public void setUid(java.lang.String value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name for the algorithm, not necessarily unique.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name for the algorithm, not necessarily unique.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Indicates the development status of the algorithm.
   */
  public com.coffeetechgaff.storm.algorithmnode.NodeStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * Indicates the development status of the algorithm.
   * @param value the value to set.
   */
  public void setStatus(com.coffeetechgaff.storm.algorithmnode.NodeStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Brief description of the purpose for the algorithm.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Brief description of the purpose for the algorithm.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'author' field.
   * @return Author responsible for the algorithm.
   */
  public java.lang.String getAuthor() {
    return author;
  }

  /**
   * Sets the value of the 'author' field.
   * Author responsible for the algorithm.
   * @param value the value to set.
   */
  public void setAuthor(java.lang.String value) {
    this.author = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Contact email for the author of the algorithm.
   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * Contact email for the author of the algorithm.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return Version for the algorithm.
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * Version for the algorithm.
   * @param value the value to set.
   */
  public void setVersion(java.lang.String value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return Input source stream type of the algorithm. Defined as array for future expansion.
   */
  public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * Input source stream type of the algorithm. Defined as array for future expansion.
   * @param value the value to set.
   */
  public void setInput(java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'output' field.
   * @return Output source stream type of the algorithm. Defined as array for future expansion.
   */
  public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> getOutput() {
    return output;
  }

  /**
   * Sets the value of the 'output' field.
   * Output source stream type of the algorithm. Defined as array for future expansion.
   * @param value the value to set.
   */
  public void setOutput(java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> value) {
    this.output = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> getParameters() {
    return parameters;
  }

  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> value) {
    this.parameters = value;
  }

  /**
   * Creates a new AlgorithmNode RecordBuilder.
   * @return A new AlgorithmNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder newBuilder() {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder();
  }

  /**
   * Creates a new AlgorithmNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlgorithmNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder newBuilder(com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder other) {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder(other);
  }

  /**
   * Creates a new AlgorithmNode RecordBuilder by copying an existing AlgorithmNode instance.
   * @param other The existing instance to copy.
   * @return A new AlgorithmNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder newBuilder(com.coffeetechgaff.storm.algorithmnode.AlgorithmNode other) {
    return new com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder(other);
  }

  /**
   * RecordBuilder for AlgorithmNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlgorithmNode>
    implements org.apache.avro.data.RecordBuilder<AlgorithmNode> {

    /** Indicates the operation for the algorithm node. */
    private com.coffeetechgaff.storm.algorithmnode.Operation operation;
    /** Unique identifier for the algorithm */
    private java.lang.String uid;
    /** Name for the algorithm, not necessarily unique. */
    private java.lang.String name;
    /** Indicates the development status of the algorithm. */
    private com.coffeetechgaff.storm.algorithmnode.NodeStatus status;
    /** Brief description of the purpose for the algorithm. */
    private java.lang.String description;
    /** Author responsible for the algorithm. */
    private java.lang.String author;
    /** Contact email for the author of the algorithm. */
    private java.lang.String email;
    /** Version for the algorithm. */
    private java.lang.String version;
    /** Input source stream type of the algorithm. Defined as array for future expansion. */
    private java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> input;
    /** Output source stream type of the algorithm. Defined as array for future expansion. */
    private java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> output;
    private java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> parameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uid)) {
        this.uid = data().deepCopy(fields()[1].schema(), other.uid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.author)) {
        this.author = data().deepCopy(fields()[5].schema(), other.author);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.email)) {
        this.email = data().deepCopy(fields()[6].schema(), other.email);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.version)) {
        this.version = data().deepCopy(fields()[7].schema(), other.version);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.input)) {
        this.input = data().deepCopy(fields()[8].schema(), other.input);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.output)) {
        this.output = data().deepCopy(fields()[9].schema(), other.output);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.parameters)) {
        this.parameters = data().deepCopy(fields()[10].schema(), other.parameters);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlgorithmNode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.coffeetechgaff.storm.algorithmnode.AlgorithmNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uid)) {
        this.uid = data().deepCopy(fields()[1].schema(), other.uid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.author)) {
        this.author = data().deepCopy(fields()[5].schema(), other.author);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.email)) {
        this.email = data().deepCopy(fields()[6].schema(), other.email);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.version)) {
        this.version = data().deepCopy(fields()[7].schema(), other.version);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.input)) {
        this.input = data().deepCopy(fields()[8].schema(), other.input);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.output)) {
        this.output = data().deepCopy(fields()[9].schema(), other.output);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.parameters)) {
        this.parameters = data().deepCopy(fields()[10].schema(), other.parameters);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'operation' field.
      * Indicates the operation for the algorithm node.
      * @return The value.
      */
    public com.coffeetechgaff.storm.algorithmnode.Operation getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * Indicates the operation for the algorithm node.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setOperation(com.coffeetechgaff.storm.algorithmnode.Operation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * Indicates the operation for the algorithm node.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * Indicates the operation for the algorithm node.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uid' field.
      * Unique identifier for the algorithm
      * @return The value.
      */
    public java.lang.String getUid() {
      return uid;
    }

    /**
      * Sets the value of the 'uid' field.
      * Unique identifier for the algorithm
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setUid(java.lang.String value) {
      validate(fields()[1], value);
      this.uid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * Unique identifier for the algorithm
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uid' field.
      * Unique identifier for the algorithm
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearUid() {
      uid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name for the algorithm, not necessarily unique.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name for the algorithm, not necessarily unique.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name for the algorithm, not necessarily unique.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * Name for the algorithm, not necessarily unique.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Indicates the development status of the algorithm.
      * @return The value.
      */
    public com.coffeetechgaff.storm.algorithmnode.NodeStatus getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * Indicates the development status of the algorithm.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setStatus(com.coffeetechgaff.storm.algorithmnode.NodeStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Indicates the development status of the algorithm.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * Indicates the development status of the algorithm.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Brief description of the purpose for the algorithm.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Brief description of the purpose for the algorithm.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Brief description of the purpose for the algorithm.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * Brief description of the purpose for the algorithm.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * Author responsible for the algorithm.
      * @return The value.
      */
    public java.lang.String getAuthor() {
      return author;
    }

    /**
      * Sets the value of the 'author' field.
      * Author responsible for the algorithm.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setAuthor(java.lang.String value) {
      validate(fields()[5], value);
      this.author = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * Author responsible for the algorithm.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'author' field.
      * Author responsible for the algorithm.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearAuthor() {
      author = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Contact email for the author of the algorithm.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * Contact email for the author of the algorithm.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setEmail(java.lang.String value) {
      validate(fields()[6], value);
      this.email = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Contact email for the author of the algorithm.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'email' field.
      * Contact email for the author of the algorithm.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearEmail() {
      email = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Version for the algorithm.
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * Version for the algorithm.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setVersion(java.lang.String value) {
      validate(fields()[7], value);
      this.version = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Version for the algorithm.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'version' field.
      * Version for the algorithm.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearVersion() {
      version = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * Input source stream type of the algorithm. Defined as array for future expansion.
      * @return The value.
      */
    public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * Input source stream type of the algorithm. Defined as array for future expansion.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setInput(java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> value) {
      validate(fields()[8], value);
      this.input = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * Input source stream type of the algorithm. Defined as array for future expansion.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'input' field.
      * Input source stream type of the algorithm. Defined as array for future expansion.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearInput() {
      input = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'output' field.
      * Output source stream type of the algorithm. Defined as array for future expansion.
      * @return The value.
      */
    public java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> getOutput() {
      return output;
    }

    /**
      * Sets the value of the 'output' field.
      * Output source stream type of the algorithm. Defined as array for future expansion.
      * @param value The value of 'output'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setOutput(java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig> value) {
      validate(fields()[9], value);
      this.output = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'output' field has been set.
      * Output source stream type of the algorithm. Defined as array for future expansion.
      * @return True if the 'output' field has been set, false otherwise.
      */
    public boolean hasOutput() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'output' field.
      * Output source stream type of the algorithm. Defined as array for future expansion.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearOutput() {
      output = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> getParameters() {
      return parameters;
    }

    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder setParameters(java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter> value) {
      validate(fields()[10], value);
      this.parameters = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.algorithmnode.AlgorithmNode.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public AlgorithmNode build() {
      try {
        AlgorithmNode record = new AlgorithmNode();
        record.operation = fieldSetFlags()[0] ? this.operation : (com.coffeetechgaff.storm.algorithmnode.Operation) defaultValue(fields()[0]);
        record.uid = fieldSetFlags()[1] ? this.uid : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (com.coffeetechgaff.storm.algorithmnode.NodeStatus) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.String) defaultValue(fields()[4]);
        record.author = fieldSetFlags()[5] ? this.author : (java.lang.String) defaultValue(fields()[5]);
        record.email = fieldSetFlags()[6] ? this.email : (java.lang.String) defaultValue(fields()[6]);
        record.version = fieldSetFlags()[7] ? this.version : (java.lang.String) defaultValue(fields()[7]);
        record.input = fieldSetFlags()[8] ? this.input : (java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig>) defaultValue(fields()[8]);
        record.output = fieldSetFlags()[9] ? this.output : (java.util.List<com.coffeetechgaff.storm.algorithmnode.NodeConfig>) defaultValue(fields()[9]);
        record.parameters = fieldSetFlags()[10] ? this.parameters : (java.util.List<com.coffeetechgaff.storm.algorithmnode.AlgorithmParameter>) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
