/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.coffeetechgaff.storm.datanode;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8963013554081089253L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataNode\",\"namespace\":\"com.coffeetechgaff.storm.datanode\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"Operation\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\",\"WRONG\"]}},{\"name\":\"id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"dataTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"classification\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"maturity\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.coffeetechgaff.storm.datanode.Operation operation;
  @Deprecated public java.lang.String id;
  @Deprecated public java.util.List<java.lang.String> dataTypes;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.String classification;
  @Deprecated public java.lang.String maturity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataNode() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param id The new value for id
   * @param dataTypes The new value for dataTypes
   * @param name The new value for name
   * @param description The new value for description
   * @param classification The new value for classification
   * @param maturity The new value for maturity
   */
  public DataNode(com.coffeetechgaff.storm.datanode.Operation operation, java.lang.String id, java.util.List<java.lang.String> dataTypes, java.lang.String name, java.lang.String description, java.lang.String classification, java.lang.String maturity) {
    this.operation = operation;
    this.id = id;
    this.dataTypes = dataTypes;
    this.name = name;
    this.description = description;
    this.classification = classification;
    this.maturity = maturity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return id;
    case 2: return dataTypes;
    case 3: return name;
    case 4: return description;
    case 5: return classification;
    case 6: return maturity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (com.coffeetechgaff.storm.datanode.Operation)value$; break;
    case 1: id = (java.lang.String)value$; break;
    case 2: dataTypes = (java.util.List<java.lang.String>)value$; break;
    case 3: name = (java.lang.String)value$; break;
    case 4: description = (java.lang.String)value$; break;
    case 5: classification = (java.lang.String)value$; break;
    case 6: maturity = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public com.coffeetechgaff.storm.datanode.Operation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(com.coffeetechgaff.storm.datanode.Operation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'dataTypes' field.
   * @return The value of the 'dataTypes' field.
   */
  public java.util.List<java.lang.String> getDataTypes() {
    return dataTypes;
  }

  /**
   * Sets the value of the 'dataTypes' field.
   * @param value the value to set.
   */
  public void setDataTypes(java.util.List<java.lang.String> value) {
    this.dataTypes = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'classification' field.
   * @return The value of the 'classification' field.
   */
  public java.lang.String getClassification() {
    return classification;
  }

  /**
   * Sets the value of the 'classification' field.
   * @param value the value to set.
   */
  public void setClassification(java.lang.String value) {
    this.classification = value;
  }

  /**
   * Gets the value of the 'maturity' field.
   * @return The value of the 'maturity' field.
   */
  public java.lang.String getMaturity() {
    return maturity;
  }

  /**
   * Sets the value of the 'maturity' field.
   * @param value the value to set.
   */
  public void setMaturity(java.lang.String value) {
    this.maturity = value;
  }

  /**
   * Creates a new DataNode RecordBuilder.
   * @return A new DataNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.datanode.DataNode.Builder newBuilder() {
    return new com.coffeetechgaff.storm.datanode.DataNode.Builder();
  }

  /**
   * Creates a new DataNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.datanode.DataNode.Builder newBuilder(com.coffeetechgaff.storm.datanode.DataNode.Builder other) {
    return new com.coffeetechgaff.storm.datanode.DataNode.Builder(other);
  }

  /**
   * Creates a new DataNode RecordBuilder by copying an existing DataNode instance.
   * @param other The existing instance to copy.
   * @return A new DataNode RecordBuilder
   */
  public static com.coffeetechgaff.storm.datanode.DataNode.Builder newBuilder(com.coffeetechgaff.storm.datanode.DataNode other) {
    return new com.coffeetechgaff.storm.datanode.DataNode.Builder(other);
  }

  /**
   * RecordBuilder for DataNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataNode>
    implements org.apache.avro.data.RecordBuilder<DataNode> {

    private com.coffeetechgaff.storm.datanode.Operation operation;
    private java.lang.String id;
    private java.util.List<java.lang.String> dataTypes;
    private java.lang.String name;
    private java.lang.String description;
    private java.lang.String classification;
    private java.lang.String maturity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.coffeetechgaff.storm.datanode.DataNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataTypes)) {
        this.dataTypes = data().deepCopy(fields()[2].schema(), other.dataTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.classification)) {
        this.classification = data().deepCopy(fields()[5].schema(), other.classification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maturity)) {
        this.maturity = data().deepCopy(fields()[6].schema(), other.maturity);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataNode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.coffeetechgaff.storm.datanode.DataNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataTypes)) {
        this.dataTypes = data().deepCopy(fields()[2].schema(), other.dataTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.classification)) {
        this.classification = data().deepCopy(fields()[5].schema(), other.classification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maturity)) {
        this.maturity = data().deepCopy(fields()[6].schema(), other.maturity);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public com.coffeetechgaff.storm.datanode.Operation getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setOperation(com.coffeetechgaff.storm.datanode.Operation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setId(java.lang.String value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataTypes' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getDataTypes() {
      return dataTypes;
    }

    /**
      * Sets the value of the 'dataTypes' field.
      * @param value The value of 'dataTypes'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setDataTypes(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.dataTypes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataTypes' field has been set.
      * @return True if the 'dataTypes' field has been set, false otherwise.
      */
    public boolean hasDataTypes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dataTypes' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearDataTypes() {
      dataTypes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setName(java.lang.String value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'classification' field.
      * @return The value.
      */
    public java.lang.String getClassification() {
      return classification;
    }

    /**
      * Sets the value of the 'classification' field.
      * @param value The value of 'classification'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setClassification(java.lang.String value) {
      validate(fields()[5], value);
      this.classification = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'classification' field has been set.
      * @return True if the 'classification' field has been set, false otherwise.
      */
    public boolean hasClassification() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'classification' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearClassification() {
      classification = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'maturity' field.
      * @return The value.
      */
    public java.lang.String getMaturity() {
      return maturity;
    }

    /**
      * Sets the value of the 'maturity' field.
      * @param value The value of 'maturity'.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder setMaturity(java.lang.String value) {
      validate(fields()[6], value);
      this.maturity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'maturity' field has been set.
      * @return True if the 'maturity' field has been set, false otherwise.
      */
    public boolean hasMaturity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'maturity' field.
      * @return This builder.
      */
    public com.coffeetechgaff.storm.datanode.DataNode.Builder clearMaturity() {
      maturity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DataNode build() {
      try {
        DataNode record = new DataNode();
        record.operation = fieldSetFlags()[0] ? this.operation : (com.coffeetechgaff.storm.datanode.Operation) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.String) defaultValue(fields()[1]);
        record.dataTypes = fieldSetFlags()[2] ? this.dataTypes : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.String) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.String) defaultValue(fields()[4]);
        record.classification = fieldSetFlags()[5] ? this.classification : (java.lang.String) defaultValue(fields()[5]);
        record.maturity = fieldSetFlags()[6] ? this.maturity : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
